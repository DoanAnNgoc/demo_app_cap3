import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from prophet import Prophet
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.mixture import GaussianMixture
from sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score, mean_absolute_error, mean_squared_error, r2_score
import numpy as np
from scipy.interpolate import make_interp_spline
import requests
import io
import logging

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# T·∫£i d·ªØ li·ªáu t·ª´ Google Drive
@st.cache_data
def load_data():
    FILE_URL = "https://drive.google.com/uc?export=download&id=1BEgh4x_dS0W-31ITcrt5iTT8Rv_aqviZ"
    logger.info("B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu t·ª´ Google Drive...")
    
    try:
        response = requests.get(FILE_URL, stream=True, timeout=30)
        response.raise_for_status()
        content_type = response.headers.get('content-type', '')
        content_length = response.headers.get('content-length', 'Unknown')
        logger.info(f"Content-Type: {content_type}, Content-Length: {content_length} bytes")
        
        if 'text/csv' not in content_type and 'application/octet-stream' not in content_type:
            st.error(f"URL kh√¥ng tr·∫£ v·ªÅ file CSV. Content-Type: {content_type}")
            logger.error(f"Invalid Content-Type: {content_type}")
            return None

        content = response.content
        encodings = ['utf-8', 'latin1', 'iso-8859-1']
        for encoding in encodings:
            try:
                logger.info(f"Th·ª≠ ƒë·ªçc CSV v·ªõi encoding: {encoding}")
                df = pd.read_csv(
                    io.BytesIO(content),
                    encoding=encoding,
                    on_bad_lines='skip',
                    quoting=3,
                    low_memory=False
                )
                logger.info("ƒê·ªçc file CSV th√†nh c√¥ng")
                break
            except (pd.errors.ParserError, UnicodeDecodeError) as e:
                logger.warning(f"L·ªói v·ªõi encoding {encoding}: {str(e)}")
                if encoding == encodings[-1]:
                    st.error("Kh√¥ng th·ªÉ ƒë·ªçc file CSV v·ªõi b·∫•t k·ª≥ encoding n√†o.")
                    logger.error(f"Th·∫•t b·∫°i v·ªõi t·∫•t c·∫£ encoding: {str(e)}")
                    return None
                continue

        logger.info(f"D·ªØ li·ªáu g·ªëc: {df.shape[0]} d√≤ng, {df.shape[1]} c·ªôt")
        st.write(f"**Th√¥ng tin d·ªØ li·ªáu g·ªëc**: {df.shape[0]} d√≤ng, {df.shape[1]} c·ªôt")
        st.write(f"**C·ªôt**: {list(df.columns)}")

        # X·ª≠ l√Ω d·ªØ li·ªáu
        df['Order Date'] = pd.to_datetime(df['Order Date'], errors='coerce')
        df['year'] = df['Order Date'].dt.year
        numeric_cols = ['Order Total', 'Product Cost', 'Shipping Fee', 'Profit', 'Quantity', 'Marketplace Fee']
        for col in numeric_cols:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')
                nan_count = df[col].isna().sum()
                if nan_count > 0:
                    st.warning(f"C·ªôt '{col}' c√≥ {nan_count} gi√° tr·ªã NaN sau khi chuy·ªÉn sang s·ªë.")

        # T√≠nh Profit theo c√¥ng th·ª©c m·ªõi
        required_cols = ['Order Total', 'Product Cost', 'Quantity', 'Shipping Fee']
        if all(col in df.columns for col in required_cols):
            if 'Marketplace Fee' in df.columns:
                df['Profit'] = df['Order Total'] - (df['Product Cost'] * df['Quantity']) - df['Shipping Fee'] - df['Marketplace Fee']
                logger.info("T√≠nh Profit v·ªõi Marketplace Fee")
            else:
                df['Profit'] = df['Order Total'] - (df['Product Cost'] * df['Quantity']) - df['Shipping Fee']
                logger.info("T√≠nh Profit kh√¥ng c√≥ Marketplace Fee")
                st.warning("C·ªôt 'Marketplace Fee' kh√¥ng c√≥, Profit ƒë∆∞·ª£c t√≠nh m√† kh√¥ng tr·ª´ ph√≠ s√†n.")
        else:
            missing_cols = [col for col in required_cols if col not in df.columns]
            st.warning(f"Thi·∫øu c√°c c·ªôt c·∫ßn thi·∫øt ƒë·ªÉ t√≠nh Profit: {missing_cols}")
            logger.warning(f"Thi·∫øu c·ªôt: {missing_cols}")

        # L√†m s·∫°ch d·ªØ li·ªáu
        df_clean = df.dropna(subset=['Order Date', 'Order Total'])
        logger.info(f"D·ªØ li·ªáu sau khi l√†m s·∫°ch: {df_clean.shape[0]} d√≤ng")
        st.write(f"**D·ªØ li·ªáu sau khi l√†m s·∫°ch**: {df_clean.shape[0]} d√≤ng (m·∫•t {df.shape[0] - df_clean.shape[0]} d√≤ng do thi·∫øu Order Date ho·∫∑c Order Total)")

        return df_clean
    
    except requests.exceptions.RequestException as e:
        st.error(f"L·ªói khi t·∫£i file t·ª´ Google Drive: {str(e)}")
        logger.error(f"L·ªói t·∫£i file: {str(e)}")
        return None
    except Exception as e:
        st.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
        logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
        return None

# T·∫£i d·ªØ li·ªáu
with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Google Drive..."):
    df = load_data()
    if df is None:
        st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra file CSV ho·∫∑c URL.")
        st.stop()

# Ti√™u ƒë·ªÅ v√† m√¥ t·∫£
st.title("ƒê·ªÅ √Ån T·ªët Nghi·ªáp - Ph√¢n T√≠ch T√¨nh h√¨nh kinh doanh - D·ª± ƒëo√°n doanh thu v√† Ph√¢n C·ª•m Kh√°ch H√†ng")
st.markdown("""
·ª®ng d·ª•ng n√†y hi·ªÉn th·ªã ph√¢n c·ª•m kh√°ch h√†ng, d·ª± ƒëo√°n doanh thu, 
v√† c√°c bi·ªÉu ƒë·ªì ph√¢n t√≠ch d·ª±a tr√™n d·ªØ li·ªáu t·ª´ file CSV tr√™n Google Drive.
B·∫°n vui l√≤ng ch·ªçn tab ƒë·ªÉ xem c√°c ph√¢n t√≠ch chi ti·∫øt.
""")

# T·∫°o c√°c tab
tab1, tab2, tab3 = st.tabs(["üìä T·ªïng Quan T√¨nh H√¨nh Kinh Doanh", "üíµ D·ª± ƒêo√°n Doanh Thu", "üìÄ Ph√¢n C·ª•m Kh√°ch H√†ng"])

# Tab 1: T·ªïng Quan Doanh Thu
with tab1:
    st.header("üìä T·ªïng Quan Doanh Thu Theo NƒÉm")
    revenue_by_year = df.groupby('year')['Order Total'].sum().reset_index()
    fig = px.bar(revenue_by_year, x='year', y='Order Total', title='T·ªïng Doanh Thu Theo NƒÉm',
                 labels={'year': 'NƒÉm', 'Order Total': 'T·ªïng Doanh Thu'}, color_discrete_sequence=['red'])
    fig.update_layout(xaxis_tickangle=0, yaxis=dict(griddash='dash', gridcolor='gray'))
    st.plotly_chart(fig)

    st.subheader("T·ªïng Order Total theo Sub-Category Theo NƒÉm")
    df['Year'] = df['Order Date'].dt.year
    pivot_data = df.groupby(['Year', 'Sub Category'])['Order Total'].sum().unstack()
    years = sorted(pivot_data.index)
    year_colors = {
        years[-3] if len(years) >= 3 else years[0]: '#1f77b4',
        years[-2] if len(years) >= 2 else years[0]: '#2ca02c',
        years[-1] if len(years) >= 1 else years[0]: '#ff7f0e',
    }
    selected_year = st.selectbox("Ch·ªçn nƒÉm:", years, index=len(years)-1)
    if years:
        data = pivot_data.loc[selected_year].sort_values()
        top5 = data.nlargest(5).index
        colors = [year_colors.get(selected_year, 'lightgray') if subcat in top5 else 'lightgray' for subcat in data.index]
        plt.figure(figsize=(10, 6))
        bars = plt.barh(data.index, data.values, color=colors)
        for bar in bars:
            width = bar.get_width()
            plt.text(width + 0.5, bar.get_y() + bar.get_height()/2, f'{width:,.2f}', va='center', fontsize=9)
        plt.title(f'T·ªïng Doanh thu theo Sub-Category - NƒÉm {selected_year}')
        plt.xlabel('T·ªïng Order Total')
        plt.ylabel('Sub-Category')
        plt.grid(True, axis='x', linestyle='--', alpha=0.7)
        plt.tight_layout()
        st.pyplot(plt.gcf())
        plt.close()
    else:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì theo Sub-Category.")

    if 'Marketplace' in df.columns:
        st.subheader("üí≥ T·ªïng Quan Theo Marketplace")
        summary = df.groupby('Marketplace').agg({
            'Order Total': 'sum', 'Product Cost': 'sum', 'Shipping Fee': 'sum', 'Profit': 'sum'
        }).reset_index()
        summary.columns = ['Marketplace', 'Revenue', 'Cost', 'ShippingFee', 'Profit']
        fig2 = go.Figure()
        for i, row in summary.iterrows():
            fig2.add_trace(go.Indicator(mode="number+delta", value=row['Revenue'], delta={'reference': 0, 'valueformat':'.2f'},
                                        title={"text": f"<b>{row['Marketplace']}</b><br>Revenue"}, domain={'row': i, 'column': 0}))
            fig2.add_trace(go.Indicator(mode="number+delta", value=row['Cost'], delta={'reference': 0, 'valueformat':'.2f'},
                                        title={"text": f"<b>{row['Marketplace']}</b><br>Cost"}, domain={'row': i, 'column': 1}))
            fig2.add_trace(go.Indicator(mode="number+delta", value=row['Profit'], delta={'reference': 0, 'valueformat':'.2f'},
                                        title={"text": f"<b>{row['Marketplace']}</b><br>Profit"}, domain={'row': i, 'column': 2}))
        fig2.update_layout(grid={'rows': len(summary), 'columns': 3, 'pattern': "independent"}, height=250 * len(summary), title="üí≥ T·ªïng Quan Theo Marketplace")
        st.plotly_chart(fig2)
    else:
        st.warning("C·ªôt 'Marketplace' kh√¥ng c√≥ trong d·ªØ li·ªáu.")

    if 'Marketplace' in df.columns and 'Order Id' in df.columns:
        st.subheader("S·ªë L∆∞·ª£ng ƒê∆°n H√†ng Theo S√†n")
        grouped = df.groupby('Marketplace').agg({'Order Total': 'sum', 'Order Id': 'count'}).reset_index().rename(columns={'Order Id': 'OrderCount'})
        colors = ['red', 'green'] * (len(grouped) // 2 + 1)
        grouped['Color'] = colors[:len(grouped)]
        fig3 = px.bar(grouped, x='Marketplace', y='OrderCount', title='S·ªë l∆∞·ª£ng ƒë∆°n h√†ng theo s√†n', text_auto=True,
                      color='Color', color_discrete_map={'red': 'red', 'green': 'green'})
        fig3.update_layout(xaxis_title='S√†n', yaxis_title='S·ªë l∆∞·ª£ng ƒë∆°n', showlegend=False)
        st.plotly_chart(fig3)
    else:
        st.warning("C·ªôt 'Marketplace' ho·∫∑c 'Order Id' kh√¥ng c√≥ trong d·ªØ li·ªáu.")

    if 'Sub Category' in df.columns and 'Quantity' in df.columns:
        st.subheader("Top 5 S·∫£n Ph·∫©m B√°n Ch·∫°y Nh·∫•t")
        top_products = df.groupby('Sub Category')['Quantity'].sum().sort_values(ascending=False).head(5).reset_index()
        fig4 = px.bar(top_products, x='Sub Category', y='Quantity', title='Top 5 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t', text_auto=True,
                      color_discrete_sequence=['red'])
        fig4.update_layout(xaxis_title='T√™n s·∫£n ph·∫©m', yaxis_title='S·ªë l∆∞·ª£ng b√°n')
        st.plotly_chart(fig4)
    else:
        st.warning("C·ªôt 'Sub Category' ho·∫∑c 'Quantity' kh√¥ng c√≥ trong d·ªØ li·ªáu.")

    if 'City' in df.columns and 'Country' in df.columns:
        st.subheader("Doanh Thu Theo Th√†nh Ph·ªë")
        city_group = df.groupby(['City', 'Country']).agg({'Order Total': 'sum'}).reset_index()
        fig5 = px.scatter_geo(city_group, locations="Country", locationmode="country names", color="Order Total",
                              size="Order Total", hover_name="City", scope='world', title='Doanh thu theo th√†nh ph·ªë', size_max=20)
        st.plotly_chart(fig5)
        st.warning("Bi·ªÉu ƒë·ªì b·∫£n ƒë·ªì hi·ªán ch·ªâ hi·ªÉn th·ªã theo qu·ªëc gia do thi·∫øu t·ªça ƒë·ªô lat/lon. C·∫ßn th√™m t·ªça ƒë·ªô ho·∫∑c d√πng geopy.")
    else:
        st.warning("C·ªôt 'City' ho·∫∑c 'Country' kh√¥ng c√≥ trong d·ªØ li·ªáu.")

# Tab 2: D·ª± ƒêo√°n Doanh Thu
with tab2:
    st.header("üíµ D·ª± ƒêo√°n Doanh Thu v·ªõi Prophet")
    prophet_df = df[['Order Date', 'Order Total']].rename(columns={'Order Date': 'ds', 'Order Total': 'y'})
    prophet_df = prophet_df.groupby('ds').sum().reset_index()
    prophet_df['y_smooth'] = prophet_df['y'].rolling(window=5, center=True, min_periods=1).mean()
    prophet_df['ds_numeric'] = prophet_df['ds'].apply(lambda x: x.timestamp())
    prophet_df = prophet_df.sort_values('ds_numeric')
    x = prophet_df['ds_numeric']
    y = prophet_df['y_smooth']
    x_smooth = np.linspace(x.min(), x.max(), 500)
    spl = make_interp_spline(x, y, k=3)
    y_smooth = spl(x_smooth)
    ds_smooth = pd.to_datetime(x_smooth, unit='s')
    model = Prophet(yearly_seasonality=True, weekly_seasonality=True, daily_seasonality=True, changepoint_prior_scale=0.01)
    model.fit(prophet_df)
    past_future = prophet_df[['ds']].copy()
    past_forecast = model.predict(past_future)
    past_forecast['yhat_smooth'] = past_forecast['yhat'].rolling(window=5, center=True, min_periods=1).mean()
    past_forecast['yhat_lower_smooth'] = past_forecast['yhat_lower'].rolling(window=5, center=True, min_periods=1).mean()
    past_forecast['yhat_upper_smooth'] = past_forecast['yhat_upper'].rolling(window=5, center=True, min_periods=1).mean()
    fig1 = go.Figure()
    fig1.add_trace(go.Scatter(x=ds_smooth, y=y_smooth, mode='lines', name='Th·ª±c t·∫ø', line=dict(color='blue', width=1)))
    fig1.add_trace(go.Scatter(x=past_forecast['ds'], y=past_forecast['yhat_smooth'], mode='lines', name='D·ª± ƒëo√°n', line=dict(color='orange', width=1)))
    fig1.add_trace(go.Scatter(x=past_forecast['ds'], y=past_forecast['yhat_upper_smooth'], mode='lines', name='Kho·∫£ng tin c·∫≠y (tr√™n)', line=dict(color='yellow', width=0), showlegend=False))
    fig1.add_trace(go.Scatter(x=past_forecast['ds'], y=past_forecast['yhat_lower_smooth'], mode='lines', name='Kho·∫£ng tin c·∫≠y (d∆∞·ªõi)', line=dict(color='yellow', width=0), fill='tonexty', fillcolor='rgba(255, 255, 0, 0.2)'))
    fig1.update_layout(title='Gi√° tr·ªã b√°n h√†ng h√†ng th√°ng - Prophet (T·∫≠p g·ªëc)', xaxis_title='Ng√†y', yaxis_title='Gi√° tr·ªã b√°n h√†ng', xaxis_tickformat='%Y-%m', xaxis_tickangle=45, yaxis=dict(griddash='dash', gridcolor='gray'))
    st.plotly_chart(fig1)
    future = model.make_future_dataframe(periods=365, freq='D')
    future_forecast = model.predict(future)
    future_forecast['yhat_smooth'] = future_forecast['yhat'].rolling(window=5, center=True, min_periods=1).mean()
    future_forecast['yhat_lower_smooth'] = future_forecast['yhat_lower'].rolling(window=5, center=True, min_periods=1).mean()
    future_forecast['yhat_upper_smooth'] = future_forecast['yhat_upper'].rolling(window=5, center=True, min_periods=1).mean()
    fig2 = go.Figure()
    fig2.add_trace(go.Scatter(x=ds_smooth, y=y_smooth, mode='lines', name='Th·ª±c t·∫ø', line=dict(color='blue', width=1)))
    fig2.add_trace(go.Scatter(x=future_forecast['ds'][future_forecast['ds'] <= prophet_df['ds'].max()], y=future_forecast['yhat_smooth'][future_forecast['ds'] <= prophet_df['ds'].max()], mode='lines', name='D·ª± ƒëo√°n', line=dict(color='orange', width=1)))
    fig2.add_trace(go.Scatter(x=future_forecast['ds'][future_forecast['ds'] > prophet_df['ds'].max()], y=future_forecast['yhat_smooth'][future_forecast['ds'] > prophet_df['ds'].max()], mode='lines', name='D·ª± ƒëo√°n t∆∞∆°ng lai', line=dict(color='red', width=1)))
    fig2.add_trace(go.Scatter(x=future_forecast['ds'][future_forecast['ds'] <= prophet_df['ds'].max()], y=future_forecast['yhat_upper_smooth'][future_forecast['ds'] <= prophet_df['ds'].max()], mode='lines', name='Kho·∫£ng tin c·∫≠y', line=dict(color='yellow', width=0), showlegend=False))
    fig2.add_trace(go.Scatter(x=future_forecast['ds'][future_forecast['ds'] <= prophet_df['ds'].max()], y=future_forecast['yhat_lower_smooth'][future_forecast['ds'] <= prophet_df['ds'].max()], mode='lines', name='Kho·∫£ng tin c·∫≠y', line=dict(color='yellow', width=0), fill='tonexty', fillcolor='rgba(255, 255, 0, 0.2)'))
    fig2.add_trace(go.Scatter(x=future_forecast['ds'][future_forecast['ds'] > prophet_df['ds'].max()], y=future_forecast['yhat_upper_smooth'][future_forecast['ds'] > prophet_df['ds'].max()], mode='lines', name='Kho·∫£ng tin c·∫≠y t∆∞∆°ng lai', line=dict(color='pink', width=0), showlegend=False))
    fig2.add_trace(go.Scatter(x=future_forecast['ds'][future_forecast['ds'] > prophet_df['ds'].max()], y=future_forecast['yhat_lower_smooth'][future_forecast['ds'] > prophet_df['ds'].max()], mode='lines', name='Kho·∫£ng tin c·∫≠y t∆∞∆°ng lai', line=dict(color='pink', width=0), fill='tonexty', fillcolor='rgba(255, 192, 203, 0.2)'))
    fig2.update_layout(title='D·ª± ƒëo√°n gi√° tr·ªã b√°n h√†ng 12 th√°ng ti·∫øp theo - Prophet', xaxis_title='Ng√†y', yaxis_title='Gi√° tr·ªã b√°n h√†ng', xaxis_tickformat='%Y-%m', xaxis_tickangle=45, yaxis=dict(griddash='dash', gridcolor='gray'))
    st.plotly_chart(fig2)
    eval_df = pd.merge(prophet_df[['ds', 'y']], past_forecast[['ds', 'yhat']], on='ds')
    mae = mean_absolute_error(eval_df['y'], eval_df['yhat'])
    rmse = np.sqrt(mean_squared_error(eval_df['y'], eval_df['yhat']))
    mape = np.mean(np.abs((eval_df['y'] - eval_df['yhat']) / eval_df['y'])) * 100
    r2 = r2_score(eval_df['y'], eval_df['yhat'])
    st.subheader("ƒê√°nh Gi√° M√¥ H√¨nh D·ª± ƒêo√°n")
    st.write(f"üìä MAE: {mae:.2f}")
    st.write(f"üìä RMSE: {rmse:.2f}")
    st.write(f"üìä MAPE: {mape:.2f}%")
    st.write(f"üìä R¬≤ Score: {r2:.2f}")
    st.subheader("D·ª± ƒêo√°n Doanh Thu Cho Ng√†y C·ª• Th·ªÉ")
    today = datetime.today().date()
    max_date = today + timedelta(days=365)
    selected_date = st.date_input("Ch·ªçn ng√†y trong t∆∞∆°ng lai ƒë·ªÉ d·ª± ƒëo√°n doanh thu:", min_value=today, max_value=max_date, value=today + timedelta(days=30))
    selected_date_df = pd.DataFrame({'ds': [pd.to_datetime(selected_date)]})
    selected_forecast = model.predict(selected_date_df)
    st.markdown(f"**D·ª± ƒëo√°n doanh thu cho ng√†y {selected_date}:**")
    st.write(f"üìà Gi√° tr·ªã d·ª± ƒëo√°n: **${selected_forecast['yhat'].iloc[0]:,.2f}**")
    st.write(f"üìâ Kho·∫£ng tin c·∫≠y th·∫•p: **${selected_forecast['yhat_lower'].iloc[0]:,.2f}**")
    st.write(f"üìä Kho·∫£ng tin c·∫≠y cao: **${selected_forecast['yhat_upper'].iloc[0]:,.2f}**")

# Tab 3: Ph√¢n C·ª•m Kh√°ch H√†ng
with tab3:
    st.header("üìÄ Ph√¢n C·ª•m Kh√°ch H√†ng v·ªõi GMM")
    df_sample = df.sample(n=35000, random_state=42)
    df_cluster = df_sample[['Product Cost', 'Shipping Fee', 'Order Total', 'Profit']]
    scaler = StandardScaler()
    df_scaled = scaler.fit_transform(df_cluster)
    pca = PCA(n_components=2)
    df_pca = pca.fit_transform(df_scaled)
    gmm = GaussianMixture(n_components=7, random_state=42)
    clusters = gmm.fit_predict(df_pca)
    df_sample['Cluster'] = clusters
    fig3 = px.scatter(x=df_pca[:, 0], y=df_pca[:, 1], color=clusters.astype(str), title='Ph√¢n C·ª•m Kh√°ch H√†ng v·ªõi GMM',
                      labels={'x': 'PCA 1', 'y': 'PCA 2', 'color': 'Cluster'}, color_discrete_sequence=px.colors.qualitative.T10)
    fig3.update_layout(showlegend=True)
    st.plotly_chart(fig3)
    st.subheader("K·∫øt Qu·∫£ Ph√¢n C·ª•m (M·∫´u)")
    st.dataframe(df_sample[['Order Id', 'City', 'Country', 'Cluster']].head())
    df_analysis = df_sample[['Product Cost', 'Shipping Fee', 'Order Total', 'Profit', 'Cluster']].copy()
    cluster_summary = df_analysis.groupby('Cluster').mean().round(2)
    cluster_counts = df_analysis['Cluster'].value_counts().sort_index()
    cluster_summary['Count'] = cluster_counts
    st.subheader("ƒê·∫∑c Tr∆∞ng Trung B√¨nh c·ªßa T·ª´ng C·ª•m")
    st.dataframe(cluster_summary)
    st.subheader("ƒê√°nh Gi√° M√¥ H√¨nh Ph√¢n C·ª•m")
    df_valid = df_sample.dropna(subset=['Cluster'])
    X_valid = df_pca
    labels = df_valid['Cluster']
    sil_score = silhouette_score(X_valid, labels)
    db_index = davies_bouldin_score(X_valid, labels)
    ch_index = calinski_harabasz_score(X_valid, labels)
    st.write(f"üìä Silhouette Score: {sil_score:.3f}")
    st.write(f"üìä Davies-Bouldin Index: {db_index:.3f}")
    st.write(f"üìä Calinski-Harabasz Index: {ch_index:.3f}")
    st.write(f"üìä S·ªë c·ª•m: {len(set(labels))}")

# Footer
st.markdown("---")
st.markdown("Web App Demo ƒê·ªÅ √Ån T·ªët Nghi·ªáp ƒë∆∞·ª£c x√¢y d·ª±ng v·ªõi Streamlit b·ªüi ·∫§n Ng·ªçc. Li√™n h·ªá h·ªó tr·ª£: anngocmukbang@gmail.com")
