import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from prophet import Prophet
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.mixture import GaussianMixture
from sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score, mean_absolute_error, mean_squared_error, r2_score
import numpy as np
from scipy.interpolate import make_interp_spline

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ
st.title("ƒê·ªÅ √Ån T·ªët Nghi·ªáp - Ph√¢n T√≠ch Doanh Thu v√† Ph√¢n C·ª•m Kh√°ch H√†ng")
st.markdown("""
·ª®ng d·ª•ng n√†y hi·ªÉn th·ªã ph√¢n c·ª•m kh√°ch h√†ng, d·ª± ƒëo√°n doanh thu,
v√† c√°c bi·ªÉu ƒë·ªì ph√¢n t√≠ch d·ª±a tr√™n d·ªØ li·ªáu t·ª´ t·ªáp Excel tr√™n Google Drive.
B·∫°n vui l√≤ng ch·ªçn tab ƒë·ªÉ xem c√°c ph√¢n t√≠ch chi ti·∫øt.
""")

# T·∫£i d·ªØ li·ªáu t·ª´ Google Drive
@st.cache_data
def load_data():
    # Li√™n k·∫øt Google Drive (thay b·∫±ng li√™n k·∫øt Excel c√¥ng khai)
    shareable_link = "https://docs.google.com/spreadsheets/d/1u2aXzp7gXuKF7qOEx-maeBNDMw7-pbQA"  
        # L·∫•y ID t·ªáp t·ª´ li√™n k·∫øt
        file_id = shareable_link.split('/d/')[1].split('/')[0]
        download_url = f'https://drive.google.com/uc?export=download&id={file_id}'
        df = pd.read_excel(download_url, engine='openpyxl')
        
        # ƒê·∫£m b·∫£o c·ªôt 'Order Date' l√† datetime
        df['Order Date'] = pd.to_datetime(df['Order Date'])
        df['year'] = df['Order Date'].dt.year
        return df
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc t·ªáp Excel t·ª´ Google Drive: {e}")
        return pd.DataFrame()  # Tr·∫£ v·ªÅ DataFrame r·ªóng n·∫øu l·ªói

# T·∫£i d·ªØ li·ªáu
with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu t·ª´ Google Drive..."):
    df = load_data()

# Ki·ªÉm tra s·ªë c·ªôt trong df
if not df.empty:
    expected_cols = 22
    print(f"S·ªë c·ªôt trong ti√™u ƒë·ªÅ DataFrame: {len(df.columns)}")
    print(f"C√°c c·ªôt: {list(df.columns)}")

    # ƒê·∫øm s·ªë d√≤ng h·ª£p l·ªá v√† kh√¥ng h·ª£p l·ªá
    clean_lines = []
    error_lines = []
    col_count_distribution = {}

    for i, row in df.iterrows():
        num_cols = len(row.dropna())
        col_count_distribution[num_cols] = col_count_distribution.get(num_cols, 0) + 1
        if num_cols == expected_cols:
            clean_lines.append(row.tolist())
        else:
            if len(error_lines) < 5:
                error_lines.append((i + 2, num_cols, row.tolist()))

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ trong Streamlit
    st.write(f"**S·ªë d√≤ng h·ª£p l·ªá (c√≥ ƒë√∫ng {expected_cols} c·ªôt):** {len(clean_lines)}")
    st.write("**Ph√¢n b·ªë s·ªë c·ªôt trong DataFrame:**")
    for num_cols, count in sorted(col_count_distribution.items()):
        st.write(f"S·ªë d√≤ng c√≥ {num_cols} c·ªôt: {count}")

    if error_lines:
        st.write("**C√°c d√≤ng kh√¥ng ƒë·∫°t s·ªë c·ªôt chu·∫©n (t·ªëi ƒëa 5 d√≤ng):**")
        for i, col_count, content in error_lines:
            st.write(f"D√≤ng {i} c√≥ {col_count} c·ªôt: {content}")
    else:
        st.write("T·∫•t c·∫£ c√°c d√≤ng ƒë·ªÅu ƒë√∫ng s·ªë c·ªôt.")

# Ti·∫øp t·ª•c c√°c tab ph√¢n t√≠ch (gi·ªØ nguy√™n m√£ c·ªßa b·∫°n)
tab1, tab2, tab3 = st.tabs(["üìä T·ªïng Quan Doanh Thu", "üíµ D·ª± ƒêo√°n Doanh Thu", "üìÄ Ph√¢n C·ª•m Kh√°ch H√†ng"])

# Tab 1: T·ªïng Quan Doanh Thu
with tab1:
    st.header("üìä T·ªïng Quan Doanh Thu Theo NƒÉm")
    if not df.empty:
        revenue_by_year = df.groupby('year')['Order Total'].sum().reset_index()
        fig = px.bar(revenue_by_year, x='year', y='Order Total', title='T·ªïng Doanh Thu Theo NƒÉm',
                     labels={'year': 'NƒÉm', 'Order Total': 'T·ªïng Doanh Thu'}, color_discrete_sequence=['red'])
        fig.update_layout(xaxis_tickangle=0, yaxis=dict(griddash='dash', gridcolor='gray'))
        st.plotly_chart(fig)

        st.subheader("T·ªïng Order Total theo Sub-Category Theo NƒÉm")
        df['Year'] = df['Order Date'].dt.year
        pivot_data = df.groupby(['Year', 'Sub Category'])['Order Total'].sum().unstack()
        years = sorted(pivot_data.index)
        year_colors = {
            years[-3] if len(years) >= 3 else years[0]: '#1f77b4',
            years[-2] if len(years) >= 2 else years[0]: '#2ca02c',
            years[-1] if len(years) >= 1 else years[0]: '#ff7f0e',
        }
        selected_year = st.selectbox("Ch·ªçn nƒÉm:", years, index=len(years)-1)
        if years:
            data = pivot_data.loc[selected_year].sort_values()
            top5 = data.nlargest(5).index
            colors = [year_colors.get(selected_year, 'lightgray') if subcat in top5 else 'lightgray' for subcat in data.index]
            plt.figure(figsize=(10, 6))
            bars = plt.barh(data.index, data.values, color=colors)
            for bar in bars:
                width = bar.get_width()
                plt.text(width + 0.5, bar.get_y() + bar.get_height()/2,
                         f'{width:,.2f}', va='center', fontsize=9)
            plt.title(f'T·ªïng Doanh thu theo Sub-Category - NƒÉm {selected_year}')
            plt.xlabel('T·ªïng Order Total')
            plt.ylabel('Sub-Category')
            plt.grid(True, axis='x', linestyle='--', alpha=0.7)
            plt.tight_layout()
            st.pyplot(plt.gcf())
            plt.close()
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì theo Sub-Category.")
    else:
        st.error("Kh√¥ng th·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì do l·ªói t·∫£i d·ªØ li·ªáu.")

# Tab 2: D·ª± ƒêo√°n Doanh Thu
with tab2:
    st.header("üíµ D·ª± ƒêo√°n Doanh Thu v·ªõi Prophet")
    if not df.empty:
        prophet_df = df[['Order Date', 'Order Total']].rename(columns={'Order Date': 'ds', 'Order Total': 'y'})
        prophet_df = prophet_df.groupby('ds').sum().reset_index()
        prophet_df['y_smooth'] = prophet_df['y'].rolling(window=5, center=True, min_periods=1).mean()
        prophet_df['ds_numeric'] = prophet_df['ds'].apply(lambda x: x.timestamp())
        prophet_df = prophet_df.sort_values('ds_numeric')
        x = prophet_df['ds_numeric']
        y = prophet_df['y_smooth']
        x_smooth = np.linspace(x.min(), x.max(), 500)
        spl = make_interp_spline(x, y, k=3)
        y_smooth = spl(x_smooth)
        ds_smooth = pd.to_datetime(x_smooth, unit='s')
        model = Prophet(yearly_seasonality=True, weekly_seasonality=True, daily_seasonality=True, changepoint_prior_scale=0.01)
        model.fit(prophet_df)
        past_future = prophet_df[['ds']].copy()
        past_forecast = model.predict(past_future)
        past_forecast['yhat_smooth'] = past_forecast['yhat'].rolling(window=5, center=True, min_periods=1).mean()
        past_forecast['yhat_lower_smooth'] = past_forecast['yhat_lower'].rolling(window=5, center=True, min_periods=1).mean()
        past_forecast['yhat_upper_smooth'] = past_forecast['yhat_upper'].rolling(window=5, center=True, min_periods=1).mean()
        fig1 = go.Figure()
        fig1.add_trace(go.Scatter(x=ds_smooth, y=y_smooth, mode='lines', name='Th·ª±c t·∫ø', line=dict(color='blue', width=1)))
        fig1.add_trace(go.Scatter(x=past_forecast['ds'], y=past_forecast['yhat_smooth'], mode='lines', name='D·ª± ƒëo√°n', line=dict(color='orange', width=1)))
        fig1.add_trace(go.Scatter(x=past_forecast['ds'], y=past_forecast['yhat_upper_smooth'], mode='lines', name='Kho·∫£ng tin c·∫≠y (tr√™n)', line=dict(color='yellow', width=0), showlegend=False))
        fig1.add_trace(go.Scatter(x=past_forecast['ds'], y=past_forecast['yhat_lower_smooth'], mode='lines', name='Kho·∫£ng tin c·∫≠y (d∆∞·ªõi)', line=dict(color='yellow', width=0), fill='tonexty', fillcolor='rgba(255, 255, 0, 0.2)'))
        fig1.update_layout(title='Gi√° tr·ªã b√°n h√†ng h√†ng th√°ng - Prophet (T·∫≠p g·ªëc)', xaxis_title='Ng√†y', yaxis_title='Gi√° tr·ªã b√°n h√†ng', xaxis_tickformat='%Y-%m', xaxis_tickangle=45, yaxis=dict(griddash='dash', gridcolor='gray'))
        st.plotly_chart(fig1)
        future = model.make_future_dataframe(periods=365, freq='D')
        future_forecast = model.predict(future)
        future_forecast['yhat_smooth'] = future_forecast['yhat'].rolling(window=5, center=True, min_periods=1).mean()
        future_forecast['yhat_lower_smooth'] = future_forecast['yhat_lower'].rolling(window=5, center=True, min_periods=1).mean()
        future_forecast['yhat_upper_smooth'] = future_forecast['yhat_upper'].rolling(window=5, center=True, min_periods=1).mean()
        fig2 = go.Figure()
        fig2.add_trace(go.Scatter(x=ds_smooth, y=y_smooth, mode='lines', name='Th·ª±c t·∫ø', line=dict(color='blue', width=1)))
        fig2.add_trace(go.Scatter(x=future_forecast['ds'][future_forecast['ds'] <= prophet_df['ds'].max()],
                                  y=future_forecast['yhat_smooth'][future_forecast['ds'] <= prophet_df['ds'].max()],
                                  mode='lines', name='D·ª± ƒëo√°n', line=dict(color='orange', width=1)))
        fig2.add_trace(go.Scatter(x=future_forecast['ds'][future_forecast['ds'] > prophet_df['ds'].max()],
                                  y=future_forecast['yhat_smooth'][future_forecast['ds'] > prophet_df['ds'].max()],
                                  mode='lines', name='D·ª± ƒëo√°n t∆∞∆°ng lai', line=dict(color='red', width=1)))
        fig2.add_trace(go.Scatter(x=future_forecast['ds'][future_forecast['ds'] <= prophet_df['ds'].max()],
                                  y=future_forecast['yhat_upper_smooth'][future_forecast['ds'] <= prophet_df['ds'].max()],
                                  mode='lines', name='Kho·∫£ng tin c·∫≠y', line=dict(color='yellow', width=0), showlegend=False))
        fig2.add_trace(go.Scatter(x=future_forecast['ds'][future_forecast['ds'] <= prophet_df['ds'].max()],
                                  y=future_forecast['yhat_lower_smooth'][future_forecast['ds'] <= prophet_df['ds'].max()],
                                  mode='lines', name='Kho·∫£ng tin c·∫≠y', line=dict(color='yellow', width=0), fill='tonexty', fillcolor='rgba(255, 255, 0, 0.2)'))
        fig2.add_trace(go.Scatter(x=future_forecast['ds'][future_forecast['ds'] > prophet_df['ds'].max()],
                                  y=future_forecast['yhat_upper_smooth'][future_forecast['ds'] > prophet_df['ds'].max()],
                                  mode='lines', name='Kho·∫£ng tin c·∫≠y t∆∞∆°ng lai', line=dict(color='pink', width=0), showlegend=False))
        fig2.add_trace(go.Scatter(x=future_forecast['ds'][future_forecast['ds'] > prophet_df['ds'].max()],
                                  y=future_forecast['yhat_lower_smooth'][future_forecast['ds'] > prophet_df['ds'].max()],
                                  mode='lines', name='Kho·∫£ng tin c·∫≠y t∆∞∆°ng lai', line=dict(color='pink', width=0), fill='tonexty', fillcolor='rgba(255, 192, 203, 0.2)'))
        fig2.update_layout(title='D·ª± ƒëo√°n gi√° tr·ªã b√°n h√†ng 12 th√°ng ti·∫øp theo - Prophet', xaxis_title='Ng√†y', yaxis_title='Gi√° tr·ªã b√°n h√†ng', xaxis_tickformat='%Y-%m', xaxis_tickangle=45, yaxis=dict(griddash='dash', gridcolor='gray'))
        st.plotly_chart(fig2)
        eval_df = pd.merge(prophet_df[['ds', 'y']], past_forecast[['ds', 'yhat']], on='ds')
        mae = mean_absolute_error(eval_df['y'], eval_df['yhat'])
        rmse = np.sqrt(mean_squared_error(eval_df['y'], eval_df['yhat']))
        mape = np.mean(np.abs((eval_df['y'] - eval_df['yhat']) / eval_df['y'])) * 100
        r2 = r2_score(eval_df['y'], eval_df['yhat'])
        st.subheader("ƒê√°nh Gi√° M√¥ H√¨nh D·ª± ƒêo√°n")
        st.write(f"üìä MAE: {mae:.2f}")
        st.write(f"üìä RMSE: {rmse:.2f}")
        st.write(f"üìä MAPE: {mape:.2f}%")
        st.write(f"üìä R¬≤ Score: {r2:.2f}")
        st.subheader("D·ª± ƒêo√°n Doanh Thu Cho Ng√†y C·ª• Th·ªÉ")
        today = datetime.today().date()
        max_date = today + timedelta(days=365)
        selected_date = st.date_input("Ch·ªçn ng√†y trong t∆∞∆°ng lai ƒë·ªÉ d·ª± ƒëo√°n doanh thu:",
                                      min_value=today,
                                      max_value=max_date,
                                      value=today + timedelta(days=30))
        selected_date_df = pd.DataFrame({'ds': [pd.to_datetime(selected_date)]})
        selected_forecast = model.predict(selected_date_df)
        st.markdown(f"**D·ª± ƒëo√°n doanh thu cho ng√†y {selected_date}:**")
        st.write(f"üìà Gi√° tr·ªã d·ª± ƒëo√°n: **${selected_forecast['yhat'].iloc[0]:,.2f}**")
        st.write(f"üìâ Kho·∫£ng tin c·∫≠y th·∫•p: **${selected_forecast['yhat_lower'].iloc[0]:,.2f}**")
        st.write(f"üìä Kho·∫£ng tin c·∫≠y cao: **${selected_forecast['yhat_upper'].iloc[0]:,.2f}**")
    else:
        st.error("Kh√¥ng th·ªÉ th·ª±c hi·ªán d·ª± ƒëo√°n do l·ªói t·∫£i d·ªØ li·ªáu.")

# Tab 3: Ph√¢n C·ª•m Kh√°ch H√†ng
with tab3:
    st.header("üìÄ Ph√¢n C·ª•m Kh√°ch H√†ng v·ªõi GMM")
    if not df.empty:
        df_sample = df.sample(n=35000, random_state=42)
        df_cluster = df_sample[['Product Cost', 'Shipping Fee', 'Order Total', 'Profit']]
        scaler = StandardScaler()
        df_scaled = scaler.fit_transform(df_cluster)
        pca = PCA(n_components=2)
        df_pca = pca.fit_transform(df_scaled)
        gmm = GaussianMixture(n_components=7, random_state=42)
        clusters = gmm.fit_predict(df_pca)
        df_sample['Cluster'] = clusters
        fig3 = px.scatter(x=df_pca[:, 0], y=df_pca[:, 1], color=clusters.astype(str), title='Ph√¢n C·ª•m Kh√°ch H√†ng v·ªõi GMM',
                          labels={'x': 'PCA 1', 'y': 'PCA 2', 'color': 'Cluster'}, color_discrete_sequence=px.colors.qualitative.T10)
        fig3.update_layout(showlegend=True)
        st.plotly_chart(fig3)
        st.subheader("K·∫øt Qu·∫£ Ph√¢n C·ª•m (M·∫´u)")
        st.dataframe(df_sample[['Order Id', 'City', 'Country', 'Cluster']].head())
        df_analysis = df_sample[['Product Cost', 'Shipping Fee', 'Order Total', 'Profit', 'Cluster']].copy()
        cluster_summary = df_analysis.groupby('Cluster').mean().round(2)
        cluster_counts = df_analysis['Cluster'].value_counts().sort_index()
        cluster_summary['Count'] = cluster_counts
        st.subheader("ƒê·∫∑c Tr∆∞ng Trung B√¨nh c·ªßa T·ª´ng C·ª•m")
        st.dataframe(cluster_summary)
        st.subheader("ƒê√°nh Gi√° M√¥ H√¨nh Ph√¢n C·ª•m")
        df_valid = df_sample.dropna(subset=['Cluster'])
        X_valid = df_pca
        labels = df_valid['Cluster']
        sil_score = silhouette_score(X_valid, labels)
        db_index = davies_bouldin_score(X_valid, labels)
        ch_index = calinski_harabasz_score(X_valid, labels)
        st.write(f"üìä Silhouette Score: {sil_score:.3f}")
        st.write(f"üìä Davies-Bouldin Index: {db_index:.3f}")
        st.write(f"üìä Calinski-Harabasz Index: {ch_index:.3f}")
        st.write(f"üìä S·ªë c·ª•m: {len(set(labels))}")
    else:
        st.error("Kh√¥ng th·ªÉ th·ª±c hi·ªán ph√¢n c·ª•m do l·ªói t·∫£i d·ªØ li·ªáu.")

# Footer
st.markdown("---")
st.markdown("Web App Demo ƒê·ªÅ √Ån T·ªët Nghi·ªáp ƒë∆∞·ª£c x√¢y d·ª±ng v·ªõi Streamlit b·ªüi ·∫§n Ng·ªçc. Li√™n h·ªá h·ªó tr·ª£: anngocmukbang@gmail.com")
